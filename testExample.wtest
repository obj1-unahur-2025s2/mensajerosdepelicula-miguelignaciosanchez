import example.*

describe "Primera parte: Destinos y mensajeros" {
  test "Roberto (90kg) puede llevar un paquete pagado en camión con un acoplado al Puente de Brooklyn"{
    roberto.usarCamion()
    roberto.cambiarAcoplados(1)
    paquete.cambiarPago()
    assertEquals(590, roberto.peso())    
    assert puenteBrooklyn.puedeEntrar(roberto)   
    assert entrega.puedeEntregar(roberto, paquete, puenteBrooklyn)
  }
  test "Neo con crédito no puede llevar un paquete no pagado a la Matrix"{
    neo.credito = true
    if (paquete.estaPagado()){
      paquete.cambiarPago()
    }
    assert neo.puedeLlamar()
    assert not paquete.estaPagado()
    assert not entrega.puedeEntregar(neo, paquete, matrix)
  }
  test "Chuck Norris siempre puede llamar y puede entrar a la Matrix"{
    assert chuckNorris.puedeLlamar()
    assert matrix.puedeEntrar(chuckNorris)
  }
  test "Roberto en bici pesa 95kg"{
    roberto.usarBici()
    assertEquals(95, roberto.peso())
  }
  test "Neo sin crédito no puede entrar a la Matrix"{
    neo.credito = false
    assert not matrix.puedeEntrar(neo)
  }
}

describe "Segunda parte: Empresa de mensajería" {
  test "Contratar un mensajero lo agrega a la lista" {
    empresaMensajeria.despedirATodos()
    empresaMensajeria.contratar(roberto)
    assertEquals(1, EmpresaMensajeria.mensajeros.size())
  }
  test "Despedir un mensajero lo quita de la lista" {
    empresaMensajeria.despedirATodos()
    empresaMensajeria.contratar(roberto)
    empresaMensajeria.contratar(neo)
    empresaMensajeria.despedir(roberto)
    assertEquals(1, EmpresaMensajeria.mensajeros.size())
    assert EmpresaMensajeria.mensajeros.contains(neo)
    assert not EmpresaMensajeria.mensajeros.contains(roberto)
  }
  test "Despedir a todos deja la lista vacía" {
    empresaMensajeria.contratar(roberto)
    empresaMensajeria.contratar(neo)
    empresaMensajeria.despedirATodos()
    assertEquals(0, empresaMensajeria.mensajeros.size())
  }
  test "Una empresa con más de 2 mensajeros es grande" {
    empresaMensajeria.despedirATodos()
    empresaMensajeria.contratar(Roberto)
    empresaMensajeria.contratar(Neo)
    empresaMensajeria.contratar(ChuckNorris)
    assert empresaMensajeria.esGrande()
  }
  test "Primer mensajero puede entregar si cumple condiciones" {
    empresaMensajeria.despedirATodos()
    empresaMensajeria.contratar(roberto)
    roberto.usarCamion()
    roberto.cambiarAcoplados(1)
    if (not paquete.estaPagado()) { paquete.cambiarPago() }
    assert empresaMensajeria.primerPuedeEntregar(paquete, puenteBrooklyn)
  }
  test "Peso del último mensajero" {
    empresaMensajeria.despedirATodos()
    empresaMensajeria.contratar(roberto)
    empresaMensajeria.contratar(neo)
    neo.vuela = true
    assertEquals(0, empresaMensajeria.pesoUltimoMensajero())
  }
}